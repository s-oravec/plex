CREATE OR REPLACE PACKAGE ut_plex_lexer AS

    --%suitepath(plex)
    --%suite(plex_lexer)
    
    --%test(initialize works with empty)
    PROCEDURE initializeWorksWithEmpty;
    
    --%test(initialize works with non empty)
    PROCEDURE initializeWorksWithNonEmpty;

    --%test(currentItem and consume works)
    PROCEDURE currentAndConsumeItemWorks;

    --%test(rollback without takeSnapshot throws)
    --%throws(-20000)
    PROCEDURE rlbckWOSnapshotThrows;
    
    --%test(commit without takeSnapshot throws)
    --%throws(-20000)
    PROCEDURE commitWOSnapshotThrows;
    
    --%test(commit after takeSnapshot throws)
    --%throws(-20000)
    PROCEDURE commitAfterSnapWorks;
    
    --%test(rollback after takeSnapshot throws)
    --%throws(-20000)
    PROCEDURE rollbackAfterSnapWorks;

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_lexer AS

    ----------------------------------------------------------------------------
    PROCEDURE initializeWorksWithEmpty IS
        l_sourceLines plex.source_lines_type := plex.source_lines_type();
    BEGIN
        -- Test
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Expectations
        ut.expect(plex_lexer.currentItem).to_be_null();
        ut.expect(plex_lexer.getIndex).to_equal(1);
        --TODO:ut.expect(plex_lexer.eof).to_be_empty();  -- pete_assert.this(plex_lexer.eof);
        ut.expect(plex_lexer.peek(1)).to_be_null();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE initializeWorksWithNonEmpty IS
        l_sourceLines plex.source_lines_type := plex.source_lines_type('foo' || chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        -- Test
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Expectations
        ut.expect(plex_lexer.currentItem).to_equal('f');
        ut.expect(plex_lexer.eof).to_be_false(); -- pete_assert.this(NOT plex_lexer.eof);
        ut.expect(plex_lexer.peek(1)).to_equal('o');
        ut.expect(plex_lexer.peek(2)).to_equal('o');
        ut.expect(plex_lexer.peek(3)).to_equal(chr(10));
        ut.expect(plex_lexer.peek(4)).to_equal('b');
        ut.expect(plex_lexer.peek(5)).to_equal('a');
        ut.expect(plex_lexer.peek(6)).to_equal('r');
        ut.expect(plex_lexer.peek(7)).to_equal(chr(10));
        ut.expect(plex_lexer.peek(8)).to_equal('b');
        ut.expect(plex_lexer.peek(9)).to_equal('a');
        ut.expect(plex_lexer.peek(10)).to_equal('z');
        ut.expect(plex_lexer.peek(11)).to_equal(chr(10));
        ut.expect(plex_lexer.peek(12)).to_be_null();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE currentAndConsumeItemWorks IS
        l_sourceLines plex.source_lines_type := plex.source_lines_type('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        -- Prepare Test
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Expectations
        ut.expect(plex_lexer.currentItem, 'CurrentItem is ''f''').to_equal('f');
        ut.expect(plex_lexer.getIndex, 'Index is 1').to_equal(1);
        -- Test
        plex_lexer.consume;
        --
        -- Expectations
        ut.expect(plex_lexer.currentItem, 'CurrentItem is ''o''').to_equal('o');
        ut.expect(plex_lexer.getIndex, 'Index is 2').to_equal(2);
    END;

    ----------------------------------------------------------------------------
    PROCEDURE rlbckWOSnapshotThrows IS
        l_sourceLines plex.source_lines_type := plex.source_lines_type('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- TEST
        plex_lexer.rollbackSnapshot;
        --
    END;

    ----------------------------------------------------------------------------
    PROCEDURE commitWOSnapshotThrows IS
        l_sourceLines plex.source_lines_type := plex.source_lines_type('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- TEST
        plex_lexer.commitSnapshot;
        --
    END;

    ----------------------------------------------------------------------------
    PROCEDURE commitAfterSnapWorks IS
        l_sourceLines plex.source_lines_type := plex.source_lines_type('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
    BEGIN
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- TEST
        plex_lexer.takeSnapshot;
        plex_lexer.consume;
        plex_lexer.commitSnapshot;
        -- consecutive rollback throws as stack is empty
        plex_lexer.rollbackSnapshot;
        --
    END;

    ----------------------------------------------------------------------------
    PROCEDURE rollbackAfterSnapWorks IS
        l_sourceLines plex.source_lines_type := plex.source_lines_type('foo'|| chr(10), 'bar'|| chr(10), 'baz'|| chr(10));
        l_indexBefore PLS_INTEGER;
    BEGIN
        -- prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- TEST
        plex_lexer.takeSnapshot;
        l_indexBefore := plex_lexer.getIndex;
        plex_lexer.consume;
        plex_lexer.consume;
        plex_lexer.rollbackSnapshot;
        -- 
        -- Expectations
        ut.expect(plex_lexer.getIndex,'indexe is restored to before take snapshot').to_equal(l_indexBefore);
        -- consecutive rollback throws as stack is empty
        plex_lexer.commitSnapshot;
        --
    END;

END;
/
