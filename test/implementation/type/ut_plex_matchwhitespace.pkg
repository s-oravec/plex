CREATE OR REPLACE PACKAGE ut_plex_matchWhitespace AS

    --%suitepath(plex)
    --%suite(plex_matchWhitespace)

    --%test(continuous whitespace characters matched as single literal - on one line)
    PROCEDURE continuousAsSingle;
    
    --%test(continuous whitespace characters matched as single literal - on multiple lines)
    PROCEDURE continuousAsSingleOnMultiLines;

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_matchWhitespace AS

    ----------------------------------------------------------------------------
    PROCEDURE continuousAsSingle IS
        l_Text         VARCHAR2(30) := ' ' || chr(9);
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchWhiteSpace := plex_matchWhiteSpace();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_WhiteSpace);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'EOF is what has left').to_be_true();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE continuousAsSingleOnMultiLines IS
        l_Text         VARCHAR2(30) := ' ' || chr(9) || chr(10) || chr(9) || ' ' || chr(10);
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(' ' || chr(9) || chr(10), chr(9) || ' ' || chr(10));
        l_match        plex_matchWhiteSpace := plex_matchWhiteSpace();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_WhiteSpace);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'EOF is what has left').to_be_true();
    END;

END;
/
