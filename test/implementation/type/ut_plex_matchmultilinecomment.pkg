CREATE OR REPLACE PACKAGE ut_plex_matchMultilineComment AS

    --%suitepath(plex)
    --%suite(plex_matchMultilineComment)

    --%test(multiline comment in single line is matched correctly)
    PROCEDURE inSingleLine;
    
    --%test(multiline comment in multiple lines is matched correctly)
    PROCEDURE inMultiLines;

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_matchMultilineComment AS

    ----------------------------------------------------------------------------
    PROCEDURE inSingleLine IS
        l_Text         VARCHAR2(30) := q'[/* tradaa */]';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchMultilineComment := plex_matchMultilineComment();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_MultilineComment);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'only EOF is left').to_be_true();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE inMultiLines IS
        l_Text         VARCHAR2(30) := '/*' || chr(10) || 'tradaa' || chr(10) || '*/';
        l_sourceLines plex.source_lines_type := plex.source_lines_type('/*' || chr(10), 'tradaa'|| chr(10), '*/');
        l_match        plex_matchMultilineComment := plex_matchMultilineComment();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_MultilineComment);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'only EOF is left').to_be_true();
    END;

END;
/
