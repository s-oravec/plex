CREATE OR REPLACE PACKAGE ut_plex_matchtextliteral AS

    --%suitepath(plex)
    --%suite(plex_matchTextLiteral)

    --%test(should match simple string literal)
    PROCEDURE shouldMatchSimple;
    
    --%test(should match escaped string literal)
    PROCEDURE shouldMatchEscaped;
    
    --%test(should match NVarchar2 string literal)
    PROCEDURE shouldMatchNVarchar;
    
    --%test(should match qLiteral with pair delimiters - [], (), {}, <>)
    PROCEDURE shouldMatchqLiteralPairDl;
    
    --%test(should match qLiteral with not pair delimiter e.g. |,^,..)
    PROCEDURE shouldMatchqLiteralSnglDl;
    
    --%test(matches should match qLiteral with closing delimiter not followed by ')
    PROCEDURE shoulMatchWithClosDelimIn;

END;
/
CREATE OR REPLACE PACKAGE BODY ut_plex_matchtextliteral AS

    ----------------------------------------------------------------------------
    PROCEDURE shouldMatchSimple IS
        l_Text         VARCHAR2(30) := q'['test']';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchTextLiteral := plex_matchTextLiteral();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_TextLiteral);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'EOF is what has left').to_be_true();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE shouldMatchEscaped IS
        l_Text         VARCHAR2(30) := q'['te''st']';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchTextLiteral := plex_matchTextLiteral();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_TextLiteral);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'EOF is what has left').to_be_true();
    END;

    ----------------------------------------------------------------------------
    PROCEDURE shouldMatchNVarchar IS
        l_Text         VARCHAR2(30) := q'[n'test']';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchTextLiteral := plex_matchTextLiteral();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_TextLiteral);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'EOF is what has left').to_be_true();
    END;
    
    ----------------------------------------------------------------------------
        PROCEDURE shouldMatchqLiteralPairDl IS
        l_Text         VARCHAR2(30) := 'q''[te''st]''';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchTextLiteral := plex_matchTextLiteral();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_TextLiteral);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'EOF is what has left').to_be_true();
    END;
    
    ----------------------------------------------------------------------------
    PROCEDURE shouldMatchqLiteralSnglDl IS
        l_Text         VARCHAR2(30) := 'q''|te''st|''';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchTextLiteral := plex_matchTextLiteral();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_TextLiteral);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'EOF is what has left').to_be_true();
    END;
    
    ----------------------------------------------------------------------------
    PROCEDURE shoulMatchWithClosDelimIn IS
        l_Text         VARCHAR2(30) := 'q''|t|e''st|''';
        l_sourceLines  plex.source_lines_type := plex.source_lines_type(l_Text);
        l_match        plex_matchTextLiteral := plex_matchTextLiteral();
        l_matchedToken plex_token;
    BEGIN
        -- Prepare
        plex_lexer.initialize(p_source_lines => l_sourceLines);
        --
        -- Test
        l_matchedToken := l_match.isMatch;
        --
        -- Expectations
        ut.expect(l_matchedToken.tokenType).to_equal(plex.tk_TextLiteral);
        ut.expect(l_matchedToken.text).to_equal(l_Text);
        ut.expect(plex_lexer.eof,'EOF is what has left').to_be_true();
    END;


END;
/
